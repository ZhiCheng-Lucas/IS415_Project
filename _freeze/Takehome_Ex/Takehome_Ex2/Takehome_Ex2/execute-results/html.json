{
  "hash": "457b653d06cd77bc9cc925621593d468",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level\"\nauthor: \"Chong Zhi Cheng\"\ndate: \"September 30, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n---\n\n\nThe application of geospatial analytics to complex societal challenges has emerged as a powerful tool for understanding and addressing global issues. This study leverages advanced spatial and spatio-temporal point pattern analysis techniques to examine the geographical distribution and evolution of armed conflict in Myanmar following the military coup of February 1, 2021.\n\nTo provide more context for this analysis, readers are encouraged to explore two key resources:\n\n1.  The International Institute for Strategic Studies (IISS) offers an interactive map of the conflict, along with a concise introduction to the situation in Myanmar. This resource can be accessed at <https://myanmar.iiss.org/>\n\n2.  For a comprehensive understanding of the conflict, the Special Advisory Council for Myanmar has published an in-depth report, available at <https://specialadvisorycouncil.org/>.\n\nThese resources complement our geospatial analysis by providing crucial background information and additional perspectives on the ongoing conflict in Myanmar.\n\n## Objectives\n\n-   if the key indicators of drug abuse of Thailand are independent from space.\n\n-   If the indicators of drug abuse is indeed spatial dependent, then, you would like to detect where are the clusters and outliers, and the hotspots.\n\n-   Last but not least, you are also interested to investigate how the observation above evolve over time.\n\nThe specific tasks of this take-home exercise are as follows:\n\n-   Using appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer:\n\n    -   a study area layer in sf polygon features. It must be at [province level](https://en.wikipedia.org/wiki/Provinces_of_Thailand) (including Bangkok) of Thailand.\n\n    -   a drug abuse indicators layer within the study area in sf polygon features.\n\n-   Using the extracted data, perform global spatial autocorrelation analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa).\n\n-   Using the extracted data, perform local spatial autocorrelation analysis by using [sfdep methods](https://r4gdsa.netlify.app/chap10.html).\n\n-   Describe the spatial patterns revealed by the analysis above.\n\n## **About Dataset**\n\n# **Thailand Drug Offenses \\[2017-2022\\]**\n\nThis dataset presents statistics related to different types of drug offenses in Thailand, categorized by fiscal year. The data provides insights into the prevalence of various drug-related cases and their distribution across different provinces.\n\nSourced from the [Office of the Narcotics Control Board](https://data.oncb.go.th/casePer)\n\n> **Cleaned and ready-to-use** 77 Provinces, 6 Years with total 7,392 rows.\n\n-   **Fiscal Year:** The fiscal year during which the drug offenses were recorded.\n\n-   **Types of Drug Offenses:** The various categories of drug-related offenses that are being reported. These categories include cases related to drug use, possession, possession with intent to distribute, trafficking, production, import, export, conspiracy, and more.\n\n-   **Number of Cases:** The total number of cases recorded for each specific combination of fiscal year, type of drug offense, and province.\n\n**Column Descriptions:**\n\n| **Column**             | **Description**                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n|------------------------||\n| fiscal_year            | The fiscal year during which the drug offenses were recorded.                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| types_of_drug_offenses | The specific type or category of drug offense being reported. The types include drug use cases, suspects in drug use cases, possession cases, suspects in possession cases, possession with intent to distribute cases, suspects in possession with intent to distribute cases, trafficking cases, suspects in trafficking cases, production cases, suspects in production cases, import cases, suspects in import cases, export cases, suspects in export cases, conspiracy cases, and suspects in conspiracy cases. |\n| no_cases               | The total number of cases recorded for the specific combination of fiscal year, type of drug offense, and province.                                                                                                                                                                                                                                                                                                                                                                                                   |\n| province_th            | The name of the province in Thailand, written in Thai.                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| province_en            | The name of the province in Thailand, written in English.                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, lubridate, scales, sfdep)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadm1 <- st_read(dsn = \"data/adm\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\zcchong\\IS415\\Takehome_Ex\\Takehome_Ex2\\data\\adm' using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadm0 <- st_read(dsn = \"data/adm\", layer = \"tha_admbnda_adm0_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm0_rtsd_20220121' from data source \n  `C:\\zcchong\\IS415\\Takehome_Ex\\Takehome_Ex2\\data\\adm' using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 13 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(adm1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadm1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   Shape_Leng Shape_Area                  ADM1_EN       ADM1_TH ADM1_PCODE\n1    2.417227 0.13133873                  Bangkok  กรุงเทพมหานคร       TH10\n2    1.695100 0.07926199             Samut Prakan    สมุทรปราการ       TH11\n3    1.251111 0.05323766               Nonthaburi         นนทบุรี       TH12\n4    1.884945 0.12698345             Pathum Thani        ปทุมธานี       TH13\n5    3.041716 0.21393797 Phra Nakhon Si Ayutthaya พระนครศรีอยุธยา       TH14\n6    1.739908 0.07920961                Ang Thong        อ่างทอง       TH15\n7    5.693342 0.54578838                 Lop Buri          ลพบุรี       TH16\n8    1.778326 0.06872655                Sing Buri         สิงห์บุรี       TH17\n9    2.896316 0.20907828                 Chai Nat         ชัยนาท       TH18\n10   4.766446 0.29208711                 Saraburi         สระบุรี       TH19\n   ADM1_REF ADM1ALT1EN ADM1ALT2EN ADM1ALT1TH ADM1ALT2TH  ADM0_EN   ADM0_TH\n1      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n2      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n3      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n4      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n5      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n6      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n7      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n8      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n9      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n10     <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n   ADM0_PCODE       date    validOn    validTo                       geometry\n1          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.6139 13...\n2          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.7306 13...\n3          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.3415 14...\n4          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.8916 14...\n5          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.5131 14...\n6          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.3332 14...\n7          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((101.3453 15...\n8          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.3691 15...\n9          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((100.1199 15...\n10         TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((101.3994 15...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the dataset\ndata <- read_csv(\"data/thai_drug_offenses_2017_2022.csv\")\n\n# 1. Basic information about the dataset\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [7,392 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ fiscal_year           : num [1:7392] 2017 2017 2017 2017 2017 ...\n $ types_of_drug_offenses: chr [1:7392] \"drug_use_cases\" \"drug_use_cases\" \"drug_use_cases\" \"drug_use_cases\" ...\n $ no_cases              : num [1:7392] 11871 200 553 450 378 ...\n $ province_th           : chr [1:7392] \"กรุงเทพมหานคร\" \"ชัยนาท\" \"นนทบุรี\" \"ปทุมธานี\" ...\n $ province_en           : chr [1:7392] \"Bangkok\" \"Chai Nat\" \"Nonthaburi\" \"Pathum Thani\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   fiscal_year = col_double(),\n  ..   types_of_drug_offenses = col_character(),\n  ..   no_cases = col_double(),\n  ..   province_th = col_character(),\n  ..   province_en = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  fiscal_year   types_of_drug_offenses    no_cases       province_th       \n Min.   :2017   Length:7392            Min.   :    0.0   Length:7392       \n 1st Qu.:2018   Class :character       1st Qu.:    1.0   Class :character  \n Median :2020   Mode  :character       Median :   70.0   Mode  :character  \n Mean   :2020                          Mean   :  535.3                     \n 3rd Qu.:2021                          3rd Qu.:  623.0                     \n Max.   :2022                          Max.   :17131.0                     \n province_en       \n Length:7392       \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. Distribution of cases across years (updated to line chart)\nyearly_cases <- data %>%\n  group_by(fiscal_year) %>%\n  summarize(Total_Cases = sum(no_cases))\n\nggplot(yearly_cases, aes(x = fiscal_year, y = Total_Cases, group = 1)) +\n  geom_line(color = \"skyblue\", size = 1) +\n  geom_point(color = \"darkblue\", size = 3) +\n  labs(title = \"Trend of Total Drug Offense Cases by Fiscal Year\",\n       x = \"Fiscal Year\", y = \"Total Cases\") +\n  theme_minimal() +\n  scale_y_continuous(labels = comma) +\n  scale_x_continuous(breaks = yearly_cases$fiscal_year) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Takehome_Ex2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 3. Types of drug offenses\noffense_types <- data %>%\n  group_by(types_of_drug_offenses) %>%\n  summarize(Total_Cases = sum(no_cases)) %>%\n  arrange(desc(Total_Cases))\n\nggplot(offense_types, aes(x = reorder(types_of_drug_offenses, -Total_Cases), y = Total_Cases)) +\n  geom_bar(stat = \"identity\", fill = \"lightgreen\") +\n  labs(title = \"Total Cases by Type of Drug Offense\",\n       x = \"Type of Offense\", y = \"Total Cases\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = comma)\n```\n\n::: {.cell-output-display}\n![](Takehome_Ex2_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# 4. Geographical distribution of cases\nprovince_cases <- data %>%\n  group_by(province_en) %>%\n  summarize(Total_Cases = sum(no_cases)) %>%\n  arrange(desc(Total_Cases))\n\ntop_10_provinces <- head(province_cases, 10)\n\nggplot(top_10_provinces, aes(x = reorder(province_en, -Total_Cases), y = Total_Cases)) +\n  geom_bar(stat = \"identity\", fill = \"salmon\") +\n  labs(title = \"Top 10 Provinces by Total Drug Offense Cases\",\n       x = \"Province\", y = \"Total Cases\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = comma)\n```\n\n::: {.cell-output-display}\n![](Takehome_Ex2_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# 5. Trends over time for top offenses\ntop_5_offenses <- head(offense_types$types_of_drug_offenses, 5)\n\ntrends_data <- data %>%\n  filter(types_of_drug_offenses %in% top_5_offenses) %>%\n  group_by(fiscal_year, types_of_drug_offenses) %>%\n  summarize(Total_Cases = sum(no_cases))\n\nggplot(trends_data, aes(x = fiscal_year, y = Total_Cases, color = types_of_drug_offenses)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Trends of Top 5 Drug Offenses Over Time\",\n       x = \"Fiscal Year\", y = \"Total Cases\") +\n  theme_minimal() +\n  scale_y_continuous(labels = comma)\n```\n\n::: {.cell-output-display}\n![](Takehome_Ex2_files/figure-html/unnamed-chunk-6-4.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get unique province names from both datasets\nshapefile_provinces <- unique(adm1$ADM1_EN)\ndata_provinces <- unique(data$province_en)\n\n# Create a comparison dataframe\ncomparison <- data.frame(\n  shapefile_provinces = sort(shapefile_provinces),\n  data_provinces = sort(data_provinces)\n)\n\n# Check for exact matches\ncomparison$exact_match <- comparison$shapefile_provinces == comparison$data_provinces\n\n# Print provinces that don't match exactly\nmismatches <- comparison[!comparison$exact_match, ]\nprint(\"Provinces that don't match exactly:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Provinces that don't match exactly:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(mismatches)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   shapefile_provinces data_provinces exact_match\n4            Bueng Kan        buogkan       FALSE\n21                Loei         Loburi       FALSE\n22            Lop Buri           Loei       FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Function to calculate string similarity\nstring_similarity <- function(a, b) {\n  agrepl(a, b, max.distance = 0.1)\n}\n\n# Check for similar names among mismatches\nif(nrow(mismatches) > 0) {\n  for(i in 1:nrow(mismatches)) {\n    similar <- sapply(data_provinces, function(x) string_similarity(mismatches$shapefile_provinces[i], x))\n    if(any(similar)) {\n      cat(\"Possible match for\", mismatches$shapefile_provinces[i], \":\", data_provinces[similar], \"\\n\")\n    }\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPossible match for Loei : Loei \n```\n\n\n:::\n\n```{.r .cell-code}\n# Check for provinces in one dataset but not in the other\nin_shapefile_not_in_data <- setdiff(shapefile_provinces, data_provinces)\nin_data_not_in_shapefile <- setdiff(data_provinces, shapefile_provinces)\n\ncat(\"\\nProvinces in shapefile but not in data:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nProvinces in shapefile but not in data:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(in_shapefile_not_in_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Lop Buri\"  \"Bueng Kan\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\nProvinces in data but not in shapefile:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nProvinces in data but not in shapefile:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(in_data_not_in_shapefile)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Loburi\"  \"buogkan\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to update province names\nupdate_province_name <- function(name) {\n  case_when(\n    name == \"Loburi\" ~ \"Lop Buri\",\n    name == \"buogkan\" ~ \"Bueng Kan\",\n    TRUE ~ name\n  )\n}\n\n# Update the province_en column\ndata$province_en <- sapply(data$province_en, update_province_name)\n\n# Verify the changes\nprint(data %>% \n  filter(province_en %in% c(\"Lop Buri\", \"Bueng Kan\", \"Loei\")) %>% \n  select(province_en) %>% \n  distinct())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n  province_en\n  <chr>      \n1 Lop Buri   \n2 Bueng Kan  \n3 Loei       \n```\n\n\n:::\n\n```{.r .cell-code}\n# Get unique province names from both datasets\nshapefile_provinces <- unique(adm1$ADM1_EN)\ndata_provinces <- unique(data$province_en)\n\n# Check for any remaining mismatches\nmismatches <- setdiff(data_provinces, shapefile_provinces)\ncat(\"\\nAny remaining mismatches between data provinces and shapefile:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nAny remaining mismatches between data provinces and shapefile:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(mismatches)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nif (length(mismatches) == 0) {\n  cat(\"\\nAll province names now match between the data file and the shapefile.\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nAll province names now match between the data file and the shapefile.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Additional check for case sensitivity\ncase_sensitive_mismatches <- setdiff(tolower(data_provinces), tolower(shapefile_provinces))\nif (length(case_sensitive_mismatches) > 0) {\n  cat(\"\\nWarning: Some provinces match when ignoring case, but have different capitalization:\\n\")\n  print(case_sensitive_mismatches)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = adm1) +\n  geom_sf() +\n  theme_minimal() +\n  labs(title = \"Provinces of Thailand\")\n```\n\n::: {.cell-output-display}\n![](Takehome_Ex2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n# \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate total cases by province\nprovince_totals <- data %>%\n  group_by(province_en) %>%\n  summarize(total_cases = sum(no_cases))\n\n# Join the totals with the spatial data\nadm1_with_data <- adm1 %>%\n  left_join(province_totals, by = c(\"ADM1_EN\" = \"province_en\"))\n\n# Create the map with a red color scheme\nggplot(data = adm1_with_data) +\n  geom_sf(aes(fill = total_cases)) +\n  scale_fill_gradient(\n    low = \"pink\",\n    high = \"darkred\",\n    name = \"Total Cases\",\n    trans = \"log\",\n    labels = scales::comma_format()\n  ) +\n  theme_minimal() +\n  labs(title = \"Overview of Drug Offense Cases in Thailand\",\n       subtitle = \"Total cases by province (2017-2022)\",\n       caption = \"Data source: Office of the Narcotics Control Board\") +\n  theme(\n    legend.position = \"right\",\n    plot.title = element_text(size = 16, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 8)\n  )\n```\n\n::: {.cell-output-display}\n![](Takehome_Ex2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate total cases by province and year\nprovince_year_totals <- data %>%\n  group_by(province_en, fiscal_year) %>%\n  summarize(total_cases = sum(no_cases), .groups = \"drop\")\n\n# Create a list of sf objects, one for each year\nadm1_with_data_by_year <- map(unique(province_year_totals$fiscal_year), function(year) {\n  year_data <- province_year_totals %>% \n    filter(fiscal_year == year)\n  \n  adm1 %>%\n    left_join(year_data, by = c(\"ADM1_EN\" = \"province_en\"))\n})\n\n# Combine all years into one sf object\nall_years_sf <- do.call(rbind, adm1_with_data_by_year)\n\n# Create the faceted map\nggplot(data = all_years_sf) +\n  geom_sf(aes(fill = total_cases)) +\n  scale_fill_gradient(\n    low = \"lightpink\",\n    high = \"darkred\",\n    name = \"Total Cases\",\n    trans = \"log\",\n    labels = scales::comma_format()\n  ) +\n  facet_wrap(~ fiscal_year, ncol = 3) +\n  theme_minimal() +\n  labs(title = \"Drug Offense Cases in Thailand by Year\",\n       subtitle = \"Total cases by province (2017-2022)\",\n       caption = \"Data source: Office of the Narcotics Control Board\") +\n  theme(\n    legend.position = \"right\",\n    plot.title = element_text(size = 16, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 8),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](Takehome_Ex2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Global spatial autocorrelation analysis\n",
    "supporting": [
      "Takehome_Ex2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}