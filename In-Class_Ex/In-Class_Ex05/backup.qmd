`{r} # Transform the data into an sf tibble data frame   #EPSG:4144 for Kalianpur 1937 Myanmar (Burma) - Moattama area. , accuracy 5.0 m, #code 1533 (default) [3]  conflict_data_sf <- conflict_data %>%   st_as_sf(coords = c("longitude", "latitude"), crs = 4326)%>%    st_transform(crs = 3857)}`

%\>% st_transform(crs = **3857**)

`{r} conflict_data_sf}`

`{r} st_crs(conflict_data_sf)}`

`{r}  # Correspond to country column in acled data adm0 = st_read(dsn = "data/adm0",                    layer = "mmr_polbnda_adm0_250k_mimu_1")  # Correspond to admin1 column in acled data adm1 = st_read(dsn = "data/adm1",                    layer = "mmr_polbnda_adm1_250k_mimu_1")  # Correspond to admin2 column in acled data adm2 = st_read(dsn = "data/adm2",                    layer = "mmr_polbnda_adm2_250k_mimu")  # Correspond to admin3 column in acled data adm3 = st_read(dsn = "data/adm3",                    layer = "mmr_polbnda_adm3_250k_mimu_1")}`

`{r}  # Extract the shapeName column shape_names <- adm1$ST  # To get unique shape names (if there are duplicates) unique_shape_names <- unique(shape_names) print(unique_shape_names)  # Unique admin1 list from acled file unique_admin1 <- unique(conflict_data_sf$admin1) print(unique_admin1)}`

-   Number of unique entries:

    -   First list: 18 entries

    -   Second list: 15 entries

<!-- -->

-   Differences in representation:

    a\) Shan region:

    -   First list: Split into "Shan-North", "Shan-South", and "Shan-East"

    -   Second list: Consolidated as just "Shan"

    b)  Bago region:

    -   First list: Split into "Bago-East" and "Bago-West"

    -   Second list: Consolidated as just "Bago"

<!-- -->

-   Consistent entries (appear in both lists): "Ayeyarwady", "Chin", "Kachin", "Kayah", "Kayin", "Magway", "Mandalay", "Mon", "Nay Pyi Taw", "Rakhine", "Sagaing", "Tanintharyi", "Yangon"

acled splits Bago into east and west and shan to north,south and east.\
however, the shapefile doesnt.\
For the sake of consistency, we will change the column in acled from bago east west to bago. and shan north, south and east to Shan

`{r} # Combine Bago-West and Bago-East to Bago, and Shan-North, Shan-East, Shan-South to Shan conflict_data_sf <- conflict_data_sf %>%   mutate(admin1 = case_when(     admin1 %in% c("Bago-West", "Bago-East") ~ "Bago",     admin1 %in% c("Shan-North", "Shan-East", "Shan-South") ~ "Shan",     TRUE ~ admin1   ))  # Check the results conflict_data_sf %>%    count(admin1) %>%    arrange(desc(n))}`

`{r} conflict_data_sf}`

`{r} plot(st_geometry(adm1))}`

`{r} st_crs(adm1)}`

`{r}  adm13414 <- st_transform(adm1, crs = 3857)}`

conflict_data_sf_pop \<- st_join(conflict_data_sf, adm1)

## Using the geospatial data sets prepared, derive quarterly KDE layers

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface.

`{r} ggplot() +   # Add administrative boundaries   geom_sf(data = adm1, fill = "lightblue", color = "darkblue", size = 0.7) +   # Add conflict points   geom_sf(data = conflict_data_sf, color = "black", size = 0.5, alpha = 0.5) +   # Customize the theme   theme_classic() +   # Add labels   labs(title = "Administrative Boundaries and Conflict Locations",        subtitle = "Black points represent conflict incidents",        caption = "Boundaries shown in dark blue")}`

`{r} conflict_data_sf_ppp <- as.ppp(st_coordinates(conflict_data_sf), st_bbox(conflict_data_sf))}`

`{r} plot(conflict_data_sf_ppp)}`

`{r} summary(conflict_data_sf_ppp)}`

`{r} conflict_data_sf_ppp_jit <- rjitter(conflict_data_sf_ppp,                               retry=TRUE,                               nsim=1,                               drop=TRUE)}`

`{r} any(duplicated(conflict_data_sf_ppp_jit))}`

`{r} adm1_owin <- as.owin(adm13414)}`

`{r} plot(adm1_owin)}`

`{r} summary(adm1_owin)}`

`{r} conflict_data_sf_ppp_jit = conflict_data_sf_ppp_jit[adm1_owin]}`

`{r} plot(conflict_data_sf_ppp_jit)}`

## **First-order Spatial Point Patterns Analysis**

`{r} kde_conflict_data_sf_ppp_jit_bw <- density(conflict_data_sf_ppp_jit,                               sigma=bw.diggle,                               edge=TRUE,                             kernel="gaussian")}`

`{r} plot(kde_conflict_data_sf_ppp_jit_bw)}`

Default for 3857 is metres

`{r} conflict_data_sf_ppp_jit.km <- rescale.ppp(conflict_data_sf_ppp_jit, 1000, "km")}`

`{r} kde_conflict_data_sf_ppp_jit.km.bw <- density(conflict_data_sf_ppp_jit.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian") plot(kde_conflict_data_sf_ppp_jit.km.bw)}`

`{r} conflict_data_sf_ppp_jit.km}`

`{r} kde_childcareSG.CvL <- density(conflict_data_sf_ppp_jit.km, sigma=bw.CvL, edge=TRUE, kernel="gaussian") plot(kde_childcareSG.CvL)}`

## Using the geospatial data sets prepared, perform 2nd-Order Spatial Point Patterns Analysis.
