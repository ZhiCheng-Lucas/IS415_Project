---
title: "Hands-On Exercise 03: 1st Order Spatial Point Patterns Analysis Methods"
author: "Chong Zhi Cheng"
date: "August 26, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

# **1st Order Spatial Point Patterns Analysis Methods**

::: callout-note
This is a note callout. I will use this for personal comments as well.
:::

## [Personal Exploration]{.underline}

asdasdasxxx

## **Overview**

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:

-   events such as crime, traffic accident and disease onset, or

-   business services (coffee and fast food outlets) or facilities such as childcare and elder care.

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childcare centers in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centers in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centers?

::: callout-note
Initial Hypothesis:

The distribution of childcare centers in Singapore is not random, but instead exhibits spatial clustering.

We expect to find higher concentrations of childcare centers in residential areas with a high proportion of young families and in locations easily accessible by public transportation.

Rationale for this hypothesis:

1.  Urban planning: Singapore is known for its careful urban planning. It's likely that childcare centers are strategically placed to serve the population efficiently.

2.  Population density: Areas with higher population density, especially those with many young families, are likely to have a greater need for childcare services.

3.  Accessibility: Childcare centers are likely to be located in areas that are easily accessible, possibly near public transportation hubs or major residential areas, to facilitate drop-offs and pick-ups for working parents.
:::

### **The Data**

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centers. It was downloaded from Data.gov.sg and is in geojson format.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

## **Getting Started**

#### Install and Launch R Packages

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)

```

### **Importing Geospatial Data into R**

```{r}
mpsz_sf  <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
childcare_sf <- st_read("data/geospatial/child-care-services-geojson.geojson")
```

```{r}
sg_sf <- st_read(dsn = "data/geospatial", 
                layer = "CostalOutline")
```

> DIY: Using the appropriate **sf** function you learned in Hands-on Exercise 2, retrieve the referencing system information of these geospatial data.
>
> DIY: If necessary, changing the referencing system to Singapore national projected coordinate system.

```{r}
st_crs(mpsz_sf)
```

```{r}
st_crs(childcare_sf)
```

```{r}
st_crs(sg_sf)
```

::: callout-note
Note that mpsz_sf is in SVY21 format while sg_sf and childcare_sf are in WGS84.

Also note that despite mpsz_sf being in SVY21 format, its ID\["EPSG",9001\]\]\]\]
:::

```{r}
mpsz_sf <- st_set_crs(mpsz_sf, 3414)
```

```{r}
childcare_sf <- st_transform(childcare_sf, 
                              crs = 3414)
```

```{r}
sg_sf <- st_transform(sg_sf, 
                              crs = 3414)
```

```{r}
st_crs(mpsz_sf)
```

```{r}
st_crs(childcare_sf)
```

```{r}
st_crs(sg_sf)
```

::: callout-note
As you can see above, all 3 are in SVY21 format and has the correct crs.
:::

### **Mapping the geospatial data sets**

After checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.

> DIY: Using the mapping methods you learned in Hands-on Exercise 3, prepare a map as shown below.

```{r}
tm_shape(sg_sf) +
  tm_polygons() +
  tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare_sf) +
  tm_dots()
```

Notice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.

Note that you can also get a similiar image with just mpsz_sf and childcare_sf

```{r}
tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare_sf) +
  tm_dots()
```

The positioning of the layer also matters a lot. As you can see in the image below where mpsz_sf and sg_sf is swapped.

```{r}
tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(sg_sf) +
  tm_polygons() +
  tm_shape(childcare_sf) +
  tm_dots()
```

Alternatively, we can also prepare a pin map by using the code chunk below.

```{r}
tmap_mode('plot')
tm_shape(childcare_sf)+
  tm_dots()
```

```{r}
tmap_mode('plot')

```

Notice that at the interactive mode, **tmap** is using [**leaflet for R**](https://rstudio.github.io/leaflet/) API. The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.

## **Geospatial Data wrangling**

Although simple feature data frame is gaining popularity again sp’s Spatial\* classes, there are, however, many geospatial analysis packages require the input geospatial data in sp’s Spatial\* classes. In this section, you will learn how to convert simple feature data frame to sp’s Spatial\* class.

### **Converting sf data frames to sp’s Spatial\* class**

The code chunk below uses [*as_Spatial()*](https://r4gdsa.netlify.app/chap04.html) of **sf** package to convert the three geospatial data from simple feature data frame to sp’s Spatial\* class.

> DIY: Using appropriate function, display the information of these three Spatial\* classes as shown below.

```{r}
childcare <- as_Spatial(childcare_sf)
```

```{r}
childcare
```

```{r}
mpsz <- as_Spatial(mpsz_sf)
```

```{r}
mpsz
```

```{r}
sg <- as_Spatial(sg_sf)
```

```{r}
sg
```

Notice that the geospatial data have been converted into their respective sp’s Spatial\* classes now.

### **Converting the Spatial\* class into generic sp format**

**spatstat** requires the analytic data in ***ppp*** object form. There is no direct way to convert a Spatial\* classes into ***ppp*** object. We need to convert the ***Spatial*** **classes**\* into ***Spatial*** object first.

The codes chunk below converts the Spatial\* classes into generic sp objects.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
```

```{r}
childcare_sp
```

```{r}
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
sg_sp
```

> Challenge: Do you know what are the differences between Spatial\* classes and generic sp object?

Spatial\* classes (such as SpatialPoints, SpatialPolygons, SpatialLines) are specialized data structures designed to represent specific types of spatial data. They include methods tailored to their particular spatial type and can hold both geometric information and associated attribute data.

In contrast, generic sp objects (like SpatialPointsDataFrame, SpatialPolygonsDataFrame, SpatialLinesDataFrame) are more general-purpose structures that combine the geometric information of Spatial\* classes with attribute data in a data frame. These generic sp objects provide a unified interface for handling various types of spatial data with their associated attributes, making them more versatile for complex spatial analyses and data manipulation tasks.

### **Converting the generic sp format into spatstat’s ppp format**

Now, we will use *as.ppp()* function of **spatstat** to convert the spatial data into **spatstat**’s ***ppp*** object format.

```{r}
# # Code referenced from Piazza
childcare_ppp <- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))
```

```{r}
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

Notice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are *simple*, that is, that the points cannot be coincident.

### **Handling duplicated points**

We can check the duplication in a ***ppp*** object by using the code chunk below.

```{r}
any(duplicated(childcare_ppp))
```

```{r}
multiplicity(childcare_ppp)
```

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

To view the locations of these duplicate point events, we will plot `childcare` data by using the code chunk below.

```{r}
tm_shape(sg_sf) +
  tm_polygons() +
  tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare) +
    tm_dots(alpha=0.4, 
            size=0.05)
```

> Challenge: Do you know how to spot the duplicate points from the map shown above?

Look for darker or more opaque dots: Where points overlap exactly, the alpha (transparency) values add up, making those locations appear darker or more solid.

There are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

The second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

The third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytic techniques that take into account these marks.

The code chunk below implements the jittering approach.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

> DIY: Using the method you learned in previous section, check if any duplicated point in this geospatial data.

```{r}
tm_shape(sg_sf) +
  tm_polygons() +
  tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare) +
    tm_dots(alpha=0.4, 
            size=0.05)
```

```{r}
any(duplicated(childcare_ppp_jit))

```

### **Creating *owin* object**

When analyzing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.

The code chunk below is used to covert *sg* SpatialPolygon object into owin object of **spatstat**.

```{r}
sg_owin <- as.owin(sg_sf)
```

The output object can be displayed by using *plot()* function

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)

```

### **Combining point events object and owin object**

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]

```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
summary(childcareSG_ppp)

```

> DIY: Using the method you learned in previous exercise, plot the newly derived childcareSG_ppp as shown below.

```{r}
plot(childcareSG_ppp)
```

## **First-order Spatial Point Patterns Analysis**

In this section, you will learn how to perform first-order SPPA by using **spatstat** package. The hands-on exercise will focus on:

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,

-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.

### **Kernel Density Estimation**

In this section, you will learn how to compute the kernel density estimation (KDE) of childcare services in Singapore.

#### Computing kernel density estimation using automatic bandwidth selection method

The code chunk below computes a kernel density by using the following configurations of [*density()*](https://rdrr.io/cran/spatstat/man/density.ppp.html) of **spatstat**:

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).

-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.

-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

The *plot()* function of Base R is then used to display the kernel density derived.

```{r}
plot(kde_childcareSG_bw)
```

The density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.

Before we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw

```

#### Rescalling KDE values

In the code chunk below, *rescale.ppp()* is used to covert the unit of measurement from meter to kilometer.

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

Notice that output image looks identical to the earlier version, the only changes in the data values (refer to the legend).

### **Working with different automatic bandwidth methods**

Beside *bw.diggle()*, there are three other **spatstat** functions can be used to determine the bandwidth, they are: *bw.CvL()*, *bw.scott()*, and *bw.ppl()*.

Let us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.

```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
kde_childcareSG.CvL <- density(childcareSG_ppp.km, sigma=bw.CvL, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.CvL)
```

```{r}
bw.scott(childcareSG_ppp.km)

```

```{r}
kde_childcareSG.scott <- density(childcareSG_ppp.km, sigma=bw.scott, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.scott)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, sigma=bw.ppl, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.ppl)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

```{r}
kde_childcareSG.diggle <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.diggle)
```

Baddeley et. (2016) suggested the use of the *bw.ppl()* algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the *bw.diggle()* method seems to work best.

The code chunk beow will be used to compare the output of using the different methods.

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2), mar=c(4, 4, 3, 2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
plot(kde_childcareSG.CvL, main = "bw.CvL")
plot(kde_childcareSG.scott, main = "bw.scott")
```

### **Working with different kernel methods**

By default, the kernel method used in *density.ppp()* is Gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.

The code chunk below will be used to compute three more kernel density estimations by using these three kernel function.

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## **Fixed and Adaptive KDE**

### **Computing KDE by using fixed bandwidth**

Next, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of ***childcareSG_ppp.km*** object is in kilometer, hence the 600m is 0.6km.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

### **Computing KDE by using adaptive bandwidth**

Fixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.

In this section, you will learn how to derive adaptive kernel density estimation by using [*density.adaptive()*](https://rdrr.io/cran/spatstat/man/adaptive.density.html) of **spatstat**.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

We can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### **Converting KDE output into grid object**

The result is the same, we just convert it so that it is suitable for mapping purposes

```{r}
gridded_kde_childcareSG_bw <- as(kde_childcareSG.bw,"SpatialGridDataFrame")
spplot(gridded_kde_childcareSG_bw)
```

#### Converting gridded output into raster

Next, we will convert the gridded kernal density objects into RasterLayer object by using *raster()* of **raster** package.

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
```

Let us take a look at the properties of *kde_childcareSG_bw_raster* RasterLayer.

```{r}
kde_childcareSG_bw_raster
```

Notice that the crs property is NA.

#### Assigning projection systems

The code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer.

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

Notice that the crs property is completed.

### **Visualising the output in tmap**

Finally, we will display the raster in cartographic quality map using **tmap** package.

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

Notice that the raster values are encoded explicitly onto the raster pixel using the values in “v”” field.

### **Comparing Spatial Point Patterns using KDE**

In this section, you will learn how to compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.

#### Extracting study area

The code chunk below will be used to extract the target planning areas.

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

Plotting target planning areas

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
```

```{r}
plot(tm, main = "Tampines")

```

```{r}
plot(ck, main = "Choa Chu Kang")

```

```{r}
plot(jw, main = "Jurong West")

```

#### Creating ***owin*** object

Now, we will convert these sf objects into owin objects that is required by **spatstat**.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

#### Combining childcare points and the study area

By using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, *rescale.ppp()* function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

The code chunk below is used to plot these four study areas and the locations of the childcare centres.

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

#### Computing KDE

The code chunk below will be used to compute the KDE of these four planning area. ***bw.diggle*** method is used to derive the bandwidth of each

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

#### Computing fixed bandwidth KDE

For comparison purposes, we will use 250m as the bandwidth.

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## **Nearest Neighbor Analysis**

In this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.

The test hypotheses are:

Ho = The distribution of childcare services are randomly distributed.

H1= The distribution of childcare services are not randomly distributed.

The 95% confident interval will be used.

### **Testing spatial point patterns using Clark and Evans Test**

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

What conclusion can you draw from the test result?

::: callout-note
The Clark-Evans test results (R = 0.55631, p-value \< 2.2e-16) provide strong evidence to reject the null hypothesis of random distribution and accept the alternative hypothesis that childcare centers in Singapore are not randomly distributed. Instead, they exhibit a significant clustering pattern.

This finding aligns with our initial hypothesis and supports the rationale that childcare center distribution in Singapore is influenced by careful urban planning, population density, and accessibility considerations. The clustered pattern likely reflects:

1.  Strategic placement of childcare facilities in areas with high concentrations of young families.

2.  A focus on accessibility, with centers possibly clustered near public transportation hubs and major residential areas.

3.  An efficient response to varying population densities across different parts of Singapore.

## 
:::

### **Clark and Evans Test: Choa Chu Kang planning area**

In the code chunk below, [*clarkevans.test()*](https://rdrr.io/cran/spatstat/man/clarkevans.test.html) of **spatstat** is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)

```

### **Clark and Evans Test: Tampines planning area**

In the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

# **2nd Order Spatial Point Patterns Analysis Methods**

## **Analysing Spatial Point Process Using G-Function**

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

### **Choa Chu Kang planning area**

#### Computing G-function estimation

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-fucntion

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)

```

```{r}
plot(G_CK.csr)
```

### **Tampines planning area**

#### Computing G-function estimation

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)

```

## **Analyzing Spatial Point Process Using F-Function**

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using [*Fest()*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

### **Choa Chu Kang planning area**

#### Computing F-function estimation

The code chunk below is used to compute F-function using *Fest()* of **spatat** package.

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

### **Performing Complete Spatial Randomness Test**

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)

```

### **Tampines planning area**

#### Computing F-function estimation

Monte Carlo test with F-function

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)

```

## **Analyzing Spatial Point Process Using K-Function**

K-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using [*Kest()*](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *envelope()* of spatstat package.

### **Choa Chu Kang planning area**

#### Computing K-function estimate

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")

```

### **Tampines planning area**

#### Computing K-function estimation

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))

```

## **Analyzing Spatial Point Process Using L-Function**

In this section, you will learn how to compute L-function estimation by using [*Lest()*](https://rdrr.io/cran/spatstat/man/Lest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *envelope()* of spatstat package.

### **Choa Chu Kang planning area**

#### Computing L Fucntion estimation

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")

```

### **Tampines planning area**

#### Computing L-function estimate

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below will be used to perform the hypothesis testing.

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)

```

Then, plot the model output by using the code chun below.

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
